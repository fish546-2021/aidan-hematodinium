# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
# Import gene list
transcript_data <- read.table(deseq_filepath,
header = TRUE, sep = "\t")
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Read BLAST data into R
blast_data <- read.table(blast_filepath, header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(transcript_data, blastkey, by = "Transcript_ID")
View(transcript_data)
# Select only the Transcript ID and Gene ID columns
transcript_key <- transcript_data[,c("Transcript_ID", "pvalue", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
# Separate Gene ID to specifically get Uniprot accession ID
transcript_key <- separate(data = transcript_key, col = Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "\\|")
View(transcript_key)
transcript_key[duplicated(transcript_key$Accession_ID)]
transcript_key[duplicated(transcript_key$Accession_ID),]
transcript_key[duplicated(transcript_key$Accession_ID),c(1,2,4)]
transcript_key[duplicated(!is.na(transcript_key$Accession_ID)),c(1,2,4)]
# Create vector of non-NA accession IDs
accession_IDs <- transcript_key[na.omit(transcript_key$Accession_ID), c(1,2,4)]
# Create vector of non-NA accession IDs
accession_IDs <- transcript_key[na.omit(transcript_key$Accession_ID), c(1,2,4)]
View(accession_IDs)
View(accession_IDs)
# Create vector of non-NA accession IDs
accession_IDs <- transcript_key[!is.na(transcript_key$Accession_ID), c(1,2,4)]
View(accession_IDs)
length(accession_IDs$Accession_ID)
length(unique(accession_IDs$Accession_ID))
duplicated(accession_IDs$Accession_ID)
duplicates <- accession_IDs[duplicated(accession_IDs$Accession_ID), ]
View(duplicates)
View(accession_IDs)
view(duplicates)
rm(duplicates)
# Remove all columns except transcript ID, gene ID, and p-value
transcript_key <- transcript_key[!is.na(transcript_key$Accession_ID), c(1,2,4)]
head(transcript_key)
# Remove all columns except transcript ID, gene ID, and p-value
transcript_key <- transcript_key[!is.na(transcript_key$Accession_ID), c(4, 2)]
# Select only the Transcript ID and Gene ID columns
transcript_key <- transcript_data[,c("Transcript_ID", "pvalue", "Gene_ID")]
length(transcript_key$Transcript_ID)
sum(is.na(transcript_key$Gene_ID))
# Separate Gene ID to specifically get Uniprot accession ID
transcript_key <- separate(data = transcript_key, col = Gene_ID, into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove all columns except transcript ID, gene ID, and p-value
transcript_key <- transcript_key[!is.na(transcript_key$Accession_ID), c(4, 2)]
View(transcript_key)
View(transcript_key)
write.csv(transcript_key, 'testing.csv')
View(transcript_key)
rownames(transcript_key) <- NULL
write.csv(transcript_key, 'testing.csv')
write.csv(transcript_key, 'testing.csv', row.names = FALSE)
write.csv(transcript_key, 'testing.csv', row.names = FALSE,
quote = FALSE)
##########################################################
library(tidyverse)
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Compare ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Compare ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Compare ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
View(geneIDs_pvals)
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/scripts")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Compare ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Compare ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Compare ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Compare ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Compare ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/scripts")
# Compare ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Compare ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Compare day 0 and day 17 treatments
geneIDs_pvals(input_file = "../graphs/day0_day17_ambient/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/day0_day17_amb.csv")
# Elevated and ambient treatments
geneIDs_pvals(input_file = "../graphs/elev_v_amb_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsAmb_day02.csv")
# Elevated and low-temp treatments
geneIDs_pvals(input_file = "../graphs/elev_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsLow_day02.csv")
# Ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Day 0 and day 17 treatments
geneIDs_pvals(input_file = "../graphs/day0_day17_ambient/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/day0_day17_amb.csv")
# Elevated and ambient treatments
geneIDs_pvals(input_file = "../graphs/elev_v_amb_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsAmb_day02.csv")
# Elevated and low-temp treatments
geneIDs_pvals(input_file = "../graphs/elev_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsLow_day02.csv")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Day 0 and day 17 treatments
geneIDs_pvals(input_file = "../graphs/day0_day17_ambient/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/day0_day17_amb.csv")
# Elevated and ambient treatments
geneIDs_pvals(input_file = "../graphs/elev_v_amb_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsAmb_day02.csv")
# Elevated and low-temp treatments
geneIDs_pvals(input_file = "../graphs/elev_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../output/input_for_GO-MWU/Elev_vsLow_day02.csv")
# Install packages
install.packages("dichromat")
# Install packages
?require()
# Install packages
require(dichromat)
# Import 2-col table of accession IDs and p-values
geneBackground <- read.csv("../input_for_GO-MWU/Amb_bsLow_day02.csv")
getwd()
# Import 2-col table of accession IDs and p-values
geneBackground <- read.csv("..output/input_for_GO-MWU/Amb_bsLow_day02.csv")
# Import 2-col table of accession IDs and p-values
geneBackground <- read.csv("..output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Import 2-col table of accession IDs and p-values
geneBackground <- read.csv("..output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Import 2-col table of accession IDs and p-values
geneBackground <- read.csv("../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
View(geneBackground)
View(geneBackground)
head(geneBackground)
# Import 2-col table of gene IDs and GO terms
uniprotGOTerms <- read.delim("../output/input_for_GO-MWU/Amb_vsLow_All_GOIDs.txt")
View(uniprotGOTerms)
# Import 2-col table of gene IDs and GO terms
uniprotGOTerms <- read.delim("../output/input_for_GO-MWU/Amb_vsLow_All_GOIDs.txt",
header = FALSE)
View(uniprotGOTerms)
View(geneBackground)
# Rename columns
colnames(uniprotGOterms) <- c("Uniprot", "GO")
# Rename columns
colnames(uniprotGOTerms) <- c("Uniprot", "GO")
View(uniprotGOTerms)
#Confirm import
head(uniprotGOTerms)
View(uniprotGOTerms)
knitr::opts_chunk$set(echo = TRUE)
geneBackground <- read.csv("../output/input_for_GO-MWU/Amb_vsLow_day02.csv")
# Confirm import
head(geneBackground)
uniprotGOTerms <- read.delim("../output/input_for_GO-MWU/Amb_vsLow_All_GOIDs.txt",
header = FALSE)
# Rename columns
colnames(uniprotGOTerms) <- c("Uniprot", "GO")
#Confirm import
head(uniprotGOTerms)
View(geneBackground)
View(uniprotGOTerms)
View(geneBackground)
# Rename columns
colnames(geneBackground) <- c("Uniprot", "pvalue")
# Confirm import
head(geneBackground)
geneBackgroundGOterms <- merge(x = geneBackground,
y = uniprotGOTerms,
by = "Uniprot")
View(geneBackgroundGOterms)
rm(geneBackgroundGOterms)
geneBackgroundGOterms <- merge(x = geneBackground,
y = uniprotGOTerms,
by = "Uniprot")
head(geneBackgroundGOterms)
##########################################################
library(tidyverse)
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../scripts/07_running_GO-MWU/Amb_vsLow_day02.csv")
# Day 0 and day 17 treatments
geneIDs_pvals(input_file = "../graphs/day0_day17_ambient/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../scripts/07_running_GO-MWU/day0_day17_amb.csv")
# Ambient and low-temp treatments
geneIDs_pvals(input_file = "../graphs/amb_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../scripts/07_running_GO-MWU/Amb_vsLow_day02pvals.csv")
# Day 0 and day 17 treatments
geneIDs_pvals(input_file = "../graphs/day0_day17_ambient/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../scripts/07_running_GO-MWU/day0_day17_ambpvals.csv")
# Elevated and ambient treatments
geneIDs_pvals(input_file = "../graphs/elev_v_amb_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../scripts/07_running_GO-MWU/Elev_vsAmb_day02pvals.csv")
# Elevated and low-temp treatments
geneIDs_pvals(input_file = "../graphs/elev_v_low_day02/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v3.0.txt",
output_file = "../scripts/07_running_GO-MWU/Elev_vsLow_day02pvals.csv")
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Amb_vsLow_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
source("gomwu.functions.R")
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/scripts/07_running_GO-MWU")
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Amb_vsLow_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Amb_vsLow_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Amb_vsLow_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Amb_vsLow_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Amb_vsLow_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/scripts/07_running_GO-MWU")
# ------------- Calculating stats
# It might take a few minutes for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
read.csv(input)
# ------------- Calculating stats
# It might take a few minutes for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
read.table(goAnnotations)
goAnnotations="testfile_candelete.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
# ------------- Calculating stats
# It might take a few minutes for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
read.table(goAnnotations)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="testfile_candelete.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
getwd()
goAnnotations="testfile_candelete.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
library(ape)
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="testfile_candelete.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="testfile_candelete.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
library(ape)
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="testfile_candelete.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:\Users\acoyl\Documents\GradSchool\RobertsLab\Tools\perl\bin\perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="Amb_vsLow_day02pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="Amb_vsLow_DEG_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
