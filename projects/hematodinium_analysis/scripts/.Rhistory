# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
# List all kallisto indices for individual libraries
kallisto_files <- Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id???/abundance.tsv")
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id...")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
View(DEG_list)
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
View(DEG_list)
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Read BLAST data into R
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
View(blast_data)
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
# List all kallisto indices for individual libraries
kallisto_files <- Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id???/abundance.tsv")
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id...")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
View(DEG_list)
# Specify file you want to write results to
outpath <- "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt"
# Write results to table
write.table(DEG_list,
file = outpath)
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE)
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE,
row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt"
kallisto_path <- ../output/kallisto_libraries_bairdihemat_transcriptomev2.0/
libraries <- ???
kallisto_path <- ../output/kallisto_libraries_bairdihemat_transcriptomev2.0/
libraries <- "???"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
test <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
test
libraries <- "*"
kallisto_path <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices for individual libraries only.
# To get indices from all libraries, change id??? to id*
kallisto_files <- Sys.glob(kallisto_path)
kallisto_files
kallisto_path <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices for individual libraries only.
# To get indices from all libraries, change id??? to id*
kallisto_files <- Sys.glob(kallisto_path)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[:alpha:]")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
kallisto_path <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices for individual libraries only.
# To get indices from all libraries, change id??? to id*
kallisto_files <- Sys.glob(kallisto_path)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[:digit:]")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
kallisto_path <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices for individual libraries only.
# To get indices from all libraries, change id??? to id*
kallisto_files <- Sys.glob(kallisto_path)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[:digit:]")
print(idnum)
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
# List all kallisto indices for individual libraries only.
# To get indices from all libraries, change id??? to id*
kallisto_files <- Sys.glob(kallisto_path)
kallisto_files
kallisto_path
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
kallisto_filepath <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices for individual libraries only.
# To get indices from all libraries, change id??? to id*
kallisto_files <- Sys.glob(kallisto_filepath)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[:digit:]")
print(idnum)
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE,
row.names = FALSE)
kallisto_filepath <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices for individual libraries only.
# To get indices from all libraries, change id??? to id*
kallisto_files <- Sys.glob(kallisto_filepath)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[0-9]+")
print(idnum)
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "*"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
kallisto_filepath <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices for individual libraries only.
# To get indices from all libraries, change id??? to id*
kallisto_files <- Sys.glob(kallisto_filepath)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[0-9]+")
print(idnum)
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
kallisto_filepath <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices for individual libraries only.
# To get indices from all libraries, change id??? to id*
kallisto_files <- Sys.glob(kallisto_filepath)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[0-9]+")
print(idnum)
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE,
row.names = FALSE)
library(tidyverse)
# Import DEG list outputted from DESeq2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Specify file you want to write results to
outpath <- "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt"
kallisto_path <- "../output/kallisto_libraries_bairdihemat_transcriptomev2.0/"
libraries <- "???"
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
head(DEG_list)
kallisto_filepath <- paste0(kallisto_path, "id", libraries, "/abundance.tsv")
# List all kallisto indices
kallisto_files <- Sys.glob(kallisto_filepath)
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id[0-9]+")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
head(DEG_list)
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE,
row.names = FALSE)
install.packages("knitcitations")
knitr::opts_chunk$set(echo = TRUE)
library(knitcitations)
cleanbib()
options("citation_format" = "pandoc")
install.packages("bibtex")
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
# Fix non-standard characters, otherwise they'll be unicode
fixbib <- readLines("references.bib")
fixbib <- gsub(pattern = "<U+0092>", replace = "test", x = fixbib)
writeLines(fixbib, con = "references.bib")
cat(fixbib)
fixbib <- gsub(pattern = "<U+0092>", replace = "test", x = fixbib)
cat(fixbib)
fixbib <- gsub(pattern = "Keefe", replace = "test", x = fixbib)
writeLines(fixbib, con = "references.bib")
fixbib
fixbib <- gsub(pattern = "<U+0092>", replace = "test", x = fixbib)
fixbib
# Fix non-standard characters, otherwise they'll be unicode
fixbib <- readLines("references.bib")
fixbib <- gsub(pattern = "<\0092", replace = "test", x = fixbib)
fixbib <- gsub(pattern = "\u0092", replace = "test", x = fixbib)
fixbib
fixbib <- gsub(pattern = "\u0092", replace = "test", x = fixbib, fixed = TRUE)
fixbib
fixbib <- gsub(pattern = "\u0092", replace = "'", x = fixbib, fixed = TRUE)
fixbib
fixbib <- iconv(fixbib, "", "ASCII", "byte")
fixbib
# Fix non-standard characters, otherwise they'll be unicode
fixbib <- readLines("references.bib")
fixbib <- iconv(fixbib, "", "ASCII", "byte")
fixbib
fixbib <- gsub(pattern = "<U+0092>", replace = "'", x = fixbib, fixed = TRUE)
fixbib
# Fix non-standard characters, otherwise they'll be unicode
fixbib <- readLines("references.bib")
fixbib <- iconv(fixbib, "", "ASCII", "byte")
fixbib
fixbib <- gsub(pattern = "<U+0092>", replace = "'", x = fixbib)
fixbib
fixbib
fixbib <- iconv(fixbib, "", "ASCII", "byte")
fixbib <- gsub(pattern = "<U+0092>", replace = "'", x = fixbib)
fixbib
# Fix non-standard characters, otherwise they'll be unicode
fixbib <- readLines("references.bib")
fixbib
fixbib <- iconv(fixbib, "", "ASCII", "byte")
fixbib <- gsub(pattern = "<U+0092>", replace = "'", x = fixbib)
fixbib
# Fix non-standard characters, otherwise they'll be unicode
fixbib <- readLines("references.bib")
fixbib <- iconv(fixbib, "", "ASCII", "byte")
fixbib
fixbib <- iconv(fixbib, "latin1", "ASCII", sub="")
fixbib
install.packages("stringi")
library(stringi)
fixbib <- stri_trans_general(fixbib, "latin-ascii")
fixbib
stri_enc_detect(fixbib)
fixbib <- gsub(pattern = "<[^>]|>", replace = "'", x = fixbib)
fixbib
# Fix non-standard characters, otherwise they'll be unicode
fixbib <- readLines("references.bib")
fixbib <- gsub(pattern = "<[^>]|>", replace = "", x = fixbib)
fixbib
fixbib <- gsub(pattern = "+0092", replace = "'", x = fixbib)
fixbib
# Fix non-standard characters, otherwise they'll be unicode
fixbib <- readLines("references.bib")
fixbib <- gsub(pattern = "<[^>]|>", replace = "", x = fixbib)
fixbib <- gsub(pattern = "\+0092", replace = "'", x = fixbib)
# Fix non-standard characters, otherwise they'll be unicode
fixbib <- readLines("references.bib")
fixbib <- gsub(pattern = "<[^>]|>", replace = "", x = fixbib)
fixbib <- gsub(pattern = "+0092", replace = "'", x = fixbib, fixed = TRUE)
fixbib
# Fix non-standard characters, otherwise they'll be unicode
fixbib <- readLines("references.bib")
fixbib <- gsub(pattern = "<[^>]|>", replace = "", x = fixbib)
fixbib <- gsub(pattern = "+0092", replace = "'", x = fixbib, fixed = TRUE)
writeLines(fixbib, con = "references.bib")
# write bibliography
write.bibtex(file = "references.bib")
# Fix non-standard characters, otherwise they'll be unicode
fixbib <- readLines("references.bib")
fixbib <- gsub(pattern = "<[^>]|>", replace = "", x = fixbib)
fixbib <- gsub(pattern = "+0092", replace = "'", x = fixbib, fixed = TRUE)
writeLines(fixbib, con = "references.bib")
knitr::opts_chunk$set(echo = TRUE)
crabs <- table(c("A,B,C", "A,B,C", "A,B,C", "G,H,I", "G,H,I", "", "E", "E", "E"), byrow=TRUE)
crabs <- table(c("A,B,C", "A,B,C", "A,B,C", "G,H,I", "G,H,I", "", "E", "E", "E"), ncol = 3, byrow=TRUE)
crabs <- table(c("A,B,C", "A,B,C", "A,B,C", "G,H,I", "G,H,I", " ", "E", "E", "E"), ncol = 3, byrow=TRUE)
crabs <- matrix(c("A,B,C", "A,B,C", "A,B,C", "G,H,I", "G,H,I", " ", "E", "E", "E"), ncol = 3, byrow=TRUE)
crabs <- as.table(crabs)
crabs
rownames(crabs) <- c("Ambient", "Elevated", "Lowered")
crabs
colnames(crabs) <- c("Day 0", "Day 2", "Day 17")
crabs
crabs <- matrix(c("A,B,C", "A,B,C", "A,B,C", "G,H,I", "G,H,I", " ", "E", "E", "E"), ncol = 3, byrow=TRUE)
crabs <- as.table(crabs)
rownames(crabs) <- c("Ambient", "Elevated", "Lowered")
colnames(crabs) <- c("Day 0", "Day 2", "Day 17")
crabs
