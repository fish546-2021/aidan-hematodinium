deseq_analysis(kallisto_path = "../output/kallisto_matrices/amb2_vs_elev2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/amb2_vs_elev2_indiv",
variable = "temp")
# Ambient Day 2 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/DEG_IDs/amb2_vs_elev2_indiv_DEG_IDs.txt")
# Ambient Day 2 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb2_vs_elev2_indiv/AllGenes_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/accession_n_GOids/allgenes_IDs/amb2_vs_elev2_indiv_All_GeneIDs.txt")
library(tidyverse)
source("hematodinium_analysis_functions.R")
# Ambient Day 2 vs. Elevated Day 2. Individual libraries
uniprot_to_GO(accession_path = "../output/accession_n_GOids/allgenes_IDs/amb2_vs_elev2_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/allgenes_IDs/amb2_vs_elev2_indiv_All_GOIDs.txt")
# Ambient Day 2 vs. Elevated Day 2, indiv. libraries only
geneIDs_pvals(input_file = "../graphs/DESeq2_output/amb2_vs_elev2_indiv/AllGenes_wcols.txt",
blast_file = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_file = "../scripts/06_running_GO-MWU/amb2_vs_elev2_indiv_pvals.csv")
# Edit these to match your data file names:
input="amb2_vs_elev2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="amb2_vs_elev2_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/scripts/06_running_GO-MWU")
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
windows()
library(ape)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.01, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.005, # FDR cutoff to print in regular (not italic) font.
level3=0.001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
library(ape)
# Edit these to match your data file names:
input="elev2_vs_amb02_indiv_only_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
# Edit these to match your data file names:
input="amb2_vs_elev2_indiv_pvals.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="amb2_vs_elev2_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
# Need to be in same directory as all other GO-MWU files -
# both data files and analysis files
setwd("06_running_GO-MWU")
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
windows()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.01, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.005, # FDR cutoff to print in regular (not italic) font.
level3=0.001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.01, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.005, # FDR cutoff to print in regular (not italic) font.
level3=0.001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
#	absValue=1, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdii_transcriptome/scripts")
DEGs <- read.delim("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
View(DEGs)
allgenes <- read.delim("../graphs/DESeq2_output/amb2_vs_elev2_indiv/AllGenes_wcols.txt",
header = TRUE,
sep = "\t")
View(allgenes)
A2E2 <- DEGs <- read.delim("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
A2E2_DEGs <- read.delim("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
E0E2_DEGs <- read.delim("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt")
E0E2_DEGs <- read.delim("../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
View(A2E2)
blast_data <- "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt"
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
View(blast_data)
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
library(tidyverse)
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blastkey <- blast_data %>%
select(Transcript_ID, Gene_ID)
View(blastkey)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(A2E2_DEGs, blastkey, by = "Transcript_ID")
View(A2E2_DEGs)
# Transcript IDs are rownames - move them into first column
A2E2_DEGs <- rownames_to_column(transcript_data, "Transcript_ID")
# Transcript IDs are rownames - move them into first column
A2E2_DEGs <- rownames_to_column(A2E2_DEGs, "Transcript_ID")
View(A2E2_DEGs)
# Add Gene ID column to transcript data, using Transcript ID column to match
A2E2_DEGs <- left_join(A2E2_DEGs, blastkey, by = "Transcript_ID")
View(A2E2_DEGs)
View(blast_data)
blast_data <- read.delim("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Add Gene ID column to transcript data, using Transcript ID column to match
A2E2_DEGs <- left_join(A2E2_DEGs, blastkey, by = "Transcript_ID")
View(A2E2_DEGs)
View(A2E2_DEGs)
View(A2E2_DEGs)
# Ambient Day 2 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/genematch_exploration/amb2_vs_elev2_indiv_DEG_IDs.txt")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Ambient Day 2 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/genematch_exploration/amb2_vs_elev2_indiv_DEG_IDs.txt")
# Elevated Day 0 vs. Elevated Day 2
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/elev0_vs_elev2_indiv/DEGlist_wcols.txt",
blast_filepath = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_path = "../output/genematch_exploration/elev0_vs_elev2_indiv_DEG_IDs.txt")
test <- read.table("../output/genematch_exploration/elev0_vs_elev2_indiv_DEG_IDs.txt")
View(test)
test <- read.table("../output/genematch_exploration/amb2_vs_elev2_indiv_DEG_IDs.txt")
View(test)
View(test)
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt")
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
View(DEG_list)
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
View(DEG_list)
View(DEG_list)
# Remove all columns that aren't transcript ID
DEG_list[,1]
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1]
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
View(DEG_list)
# Read BLAST data into R
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
View(blast_data)
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
View(blast_data)
# Add Gene ID column to transcript data, using Transcript ID column to match
transcript_data <- left_join(transcript_data, blast_data, by = "Transcript_ID")
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
View(DEG_list)
# Select only DEGs with transcript IDs that match to genes
DEG_list[!is.na(DEG_list$Gene_ID)]
# Select only DEGs with transcript IDs that match to genes
DEG_list[!is.na(DEG_list$Gene_ID),]
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
View(DEG_list)
# Read in kallisto output for a library
kallisto_output <- read.delim("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id072/abundance.tsv",
header = TRUE,
sep = "\t")
View(kallisto_output)
head(kallisto_output)
kallisto_output %>%
select(target_id, tpm)
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
View(kallisto_output)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID", "TPM")
View(kallisto_output)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID", "072_TPM")
View(kallisto_output)
test <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
View(test)
?list.files
?Sys.glob()
Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/", "id???", "abundance.tsv")
Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id???/abundance.tsv")
kallisto_files <- Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id???/abundance.tsv")
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
kallisto_files[1]
print(i)
print(1)
length(kallisto_files)
test <- i + 1
print(i)
for (i in 1:20) {
res[i] <- 1
}
print(i)
for (i in 1:20) {
print(i)
}
for (i in 1:length(kallisto_files)) {
print(i)
}
?grep
for (i in 1:length(kallisto_files)) {
filename <- kallisto_files[i]
test <- grep('id???', filename)
}
for (i in 1:length(kallisto_files)) {
filename <- kallisto_files[i]
test <- grep('id???', filename)
print(test)
}
grep("id???", kallisto_files)
grep("hemat", kallisto_files)
grep("072", kallisto_files)
grep("072", kallisto_files, value = TRUE)
str_extract(kallisto_files[1], "id???")
str_extract(kallisto_files, "hemat")
str_extract(kallisto_files, "id?")
str_extract(kallisto_files, "id*")
*
str_extract(kallisto_files, "id")
str_extract(kallisto_files, "id...")
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id...")
print(idnum)
}
kallisto_files[1]
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Transcript IDs are rownames - move them into first column
transcript_data <- tibble::rownames_to_column(transcript_data,
"Transcript_ID")
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Read BLAST data into R
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
View(DEG_list)
for (i in 1:length(kallisto_files)) {
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Read BLAST data into R
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
# List all kallisto indices for individual libraries
kallisto_files <- Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id???/abundance.tsv")
for (i in 1:length(kallisto_files)) {
View(DEG_list)
# Read BLAST data into R
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Read BLAST data into R
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# List all kallisto indices for individual libraries
kallisto_files <- Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id???/abundance.tsv")
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Read BLAST data into R
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
# List all kallisto indices for individual libraries
kallisto_files <- Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id???/abundance.tsv")
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[1], "id...")
kallisto_output <- read.delim(file = kallisto_files[1],
header = TRUE,
sep = "\t")
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "TPM")
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "TPM"))
View(kallisto_output)
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
View(kallisto_output)
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
View(DEG_list)
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Read BLAST data into R
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
# List all kallisto indices for individual libraries
kallisto_files <- Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id???/abundance.tsv")
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id...")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
View(DEG_list)
# Import DEG list for Amb 2 vs. Elev 2
DEG_list <- read.table("../graphs/DESeq2_output/amb2_vs_elev2_indiv/DEGlist_wcols.txt",
header = TRUE,
sep = "\t")
View(DEG_list)
# Transcript IDs are rownames - move them into first column
DEG_list <- rownames_to_column(DEG_list,
"Transcript_ID")
# Remove all columns that aren't transcript ID
DEG_list <- DEG_list[,1, drop = FALSE]
# Read BLAST data into R
blast_data <- read.table("../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
header = FALSE,
sep = "\t")
View(blast_data)
# Columns have no names - add names for first two columns
colnames(blast_data)[1:2] <- c("Transcript_ID", "Gene_ID")
# Turn the first two columns of BLAST data into a Transcript ID/Gene ID key
blast_data <- blast_data %>%
select(Transcript_ID, Gene_ID)
# Add Gene ID column to transcript data, using Transcript ID column to match
DEG_list <- left_join(DEG_list, blast_data, by = "Transcript_ID")
# Select only DEGs with transcript IDs that match to genes
DEG_list <- DEG_list[!is.na(DEG_list$Gene_ID),]
# List all kallisto indices for individual libraries
kallisto_files <- Sys.glob("../output/kallisto_libraries_bairdihemat_transcriptomev2.0/id???/abundance.tsv")
for (i in 1:length(kallisto_files)) {
# Extract the ID number from the kallisto file
idnum <- str_extract(kallisto_files[i], "id...")
# Read in the kallisto file
kallisto_output <- read.delim(file = kallisto_files[i],
header = TRUE,
sep = "\t")
# Select only transcript ID and TPM (transcripts per million) columns
kallisto_output <- kallisto_output %>%
select(target_id, tpm)
# Rename kallisto column names
colnames(kallisto_output)[1:2] <- c("Transcript_ID",
paste0(idnum, "_TPM"))
# Add TPM value to table of DEGs
DEG_list <- left_join(DEG_list, kallisto_output, by = "Transcript_ID")
}
View(DEG_list)
# Specify file you want to write results to
outpath <- "../output/TPM_counts/amb2_vs_elev2_DEG_TPMs.txt"
# Write results to table
write.table(DEG_list,
file = outpath)
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE)
# Write results to table
write.table(DEG_list,
file = outpath,
quote = FALSE,
row.names = FALSE)
